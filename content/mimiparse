#!/usr/bin/perl -w

##########################################################################
#
#    Mimiparse: Parser for Mimikatz output
#    Copyright (C) 2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

use strict;

# Parser for Mimikatz output
my $file = $ARGV[0];

if (!$file || ! -f "$file"){
	print "Usage: $0 <raw mimikatz file>.\n\tOutput is written to STDOUT.\n";
	exit 1;
}

print "Parsing Mimikatz file $file\n";
my (@domains,%creds);

if (open(MM,$file)){
	# First pass through the file, record the valid domains
	until (eof MM){
		my $line=readline (*MM);
		$line =~ s/[\r\n]//g;
		if ($line =~ /^\[\d/){
			$line =~ s/\[\d{1,}\] \{ //; $line =~ s/ \}//;
			my ($dom,$acc,$pwd) = split " ; ", $line;
			if ($acc && $acc =~ /\.DOM$/){
				my $tmp=$dom; $dom=$acc; $acc=$tmp;
				$dom =~ s/\.DOM$//;
				addDomain($dom);
			}
		} else {
			if ($line =~ /^Domaine d/){
				my ($junk,$domain) = split (" : ", $line, 2);
				next if ($domain =~ /^NT /);
				addDomain($domain) if ($domain =~ /\S/);
			}
		}
	} 
	close MM;

	open(MM,$file);
	# Now record the valid accounts in each domain
	my ($stanzaPrincipal,$stanzaDomain,$krb,$wdigest,$tspkg,$junk);

	until (eof MM){
		my $line=readline (*MM);
		$line =~ s/[\r\n]//g;
		if ($line =~ /^\[\d/){
			$line =~ s/\[\d{1,}\] \{ //; $line =~ s/ \}//;
			my ($dom,$acc,$pwd) = split " ; ", $line;
			if ($acc && $acc =~ /\.DOM$/){
				my $tmp=$dom; $dom=$acc; $acc=$tmp;
				$dom =~ s/\.DOM$//;
			}
			# Skip machine accounts
			next if (!$acc || !$pwd);
			next if (length($pwd) > 96) || ($acc =~ /[:]/) || ($dom =~ /\//) || ($acc =~ /HOST\//);
			if (haveDomain($dom)){
				addAccount($dom,$acc);
				addPassword($dom,$acc,$pwd);
			}
		} else {
			if ($line =~ /^Domaine d'authen/){
				($junk,$stanzaDomain)=split (": ",$line,2);
			}
			if ($line =~ /^Utilisateur principal/){
				($junk,$stanzaPrincipal)=split (": ",$line,2);
				next if (length($stanzaPrincipal)==0);
				$stanzaPrincipal = undef if ($stanzaPrincipal =~ /\$$/);
			}
			if ($line =~ /kerberos :/){
				($junk,$krb)=split (/ :\s+/,$line,2);
				$krb = undef if (length($krb)==0);
			}
			if ($line =~ /wdigest :/){
				($junk,$wdigest)=split (/ :\s+/,$line,2);
				$wdigest = undef if (length($wdigest)==0);
			}
			if ($line =~ /tspkg :/){
				($junk,$tspkg)=split (/ :\s+/,$line,2);
				$tspkg = undef if (length($tspkg)==0);
			}
			if (length($line) == 0 && $stanzaDomain && $stanzaPrincipal){
				if (haveDomain($stanzaDomain) && ($krb || $wdigest || $tspkg)){
					my $pass;
					$pass=$krb if (defined($krb));
					$pass=$tspkg if (defined($tspkg));
					$pass=$wdigest if (defined($wdigest));
					addAccount($stanzaDomain,$stanzaPrincipal);
					addPassword($stanzaDomain,$stanzaPrincipal,$pass);
				}
				# Reset for the next stanza
				($stanzaPrincipal,$stanzaDomain,$krb,$wdigest,$tspkg) = (undef,undef,undef,undef,undef);
			} 
		}
	} 
	close MM;

	# And finally display the output
	for my $domain (@domains){
		print "Domain: $domain\n";
		for my $account (@{$creds{'accounts'}{$domain}}){
			print " > $account: ";
			for my $password (@{$creds{'passwords'}{$domain}{$account}}){
				print "\"$password\" ";
			}
			print "\n";
		}
	}

	exit 0;
} else {
	print "Couldn't open Mimikatz file.\n";
	exit 1;
}

sub addDomain {
	my $domain=shift();
	for my $dom (@domains){
		return 0 if ($dom eq $domain);
	}
	push @domains, $domain;
}
sub addAccount {
	my $domain=shift();
	my $account=shift();
	for my $acc (@{$creds{'accounts'}{$domain}}){
		return 0 if ($acc eq $account);
	}
	push @{$creds{'accounts'}{$domain}}, $account;
}
sub addPassword {
	my $domain=shift();
	my $account=shift();
	my $password=shift();
	for my $pwd (@{$creds{'passwords'}{$domain}{$account}}){
		return 0 if ($pwd eq $password);
	}
	push @{$creds{'passwords'}{$domain}{$account}}, $password;
}

sub haveDomain {
	my $domain=shift();
	for my $dom (@domains){
		return 1 if ($dom eq $domain);
	}
	return 0;
}

